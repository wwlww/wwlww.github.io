<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A simple blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-11T11:57:44.749Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>wwlww</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>quick_sort and merge_sort</title>
    <link href="http://example.com/2022/12/10/quick-sort-and-merge-sort/"/>
    <id>http://example.com/2022/12/10/quick-sort-and-merge-sort/</id>
    <published>2022-12-10T22:38:21.000Z</published>
    <updated>2022-12-11T11:57:44.749Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：简单记录一下快速排序与归并排序的实C++实现。</p></blockquote><span id="more"></span><h2 id="1-快速排序"><a href="#1-快速排序" class="headerlink" title="1.快速排序"></a>1.快速排序</h2><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> arr[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<span class="hljs-comment">//传入待排数组和左右边界</span><br>    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">//排除空数组和单个数字</span><br>    <span class="hljs-type">int</span> i=l<span class="hljs-number">-1</span>,j=r+<span class="hljs-number">1</span>,x=q[(l+r)/<span class="hljs-number">2</span>];<br>    <span class="hljs-comment">//设定双指针的位置，启动位置距离边界为1,x为分界点</span><br>    <span class="hljs-keyword">while</span>(i&lt;j)&#123;<br>        <span class="hljs-keyword">do</span> i++;<span class="hljs-keyword">while</span> (q[i]&lt;x);<br>    <span class="hljs-comment">//比较数字与分界点的大小，当i指针运行到大于分界点的数字时停下</span><br>        <span class="hljs-keyword">do</span> j--;<span class="hljs-keyword">while</span> (q[j]&gt;x);<br>    <span class="hljs-comment">//比较数字与分界点的大小，当j指针运行到小于分界点的数字时停下</span><br>        <span class="hljs-keyword">if</span>(i&lt;j) <span class="hljs-built_in">swap</span>(q[i],q[j]);<br>    <span class="hljs-comment">//交换i和j所指的不满足分界条件的数字，使其仍然满足i左边的全小于x，j右边的全大于x</span><br>    &#125;<br>    <span class="hljs-built_in">quickSort</span>(q,l,j);<br>    <span class="hljs-built_in">quickSort</span>(q,j+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-comment">//将数组分为l到j和j+1到r两部分，递归处理两边，分治的思想</span><br>    <span class="hljs-comment">//注意：当用i指针划分时，应取l到i-1和i-1到r，此时x不能取q[l]，否则会发生死循环，当使用j时同理，不能取q[r]</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-comment">//读入数组长度</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;arr[i]);<br>    <span class="hljs-comment">//正序读入数组</span><br>    &#125;<br>   <span class="hljs-built_in">quickSort</span>(arr,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>   <span class="hljs-comment">//调用快排函数</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br>    <span class="hljs-comment">//打印排序后的数组</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-归并排序"><a href="#2-归并排序" class="headerlink" title="2.归并排序"></a>2.归并排序</h2><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> arr[N],temp[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//“&gt;&gt;”为位运算，表示左值除以2的右值次方</span><br>    <span class="hljs-built_in">merge_sort</span>(q,l,mid),<span class="hljs-built_in">merge_sort</span>(q,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-comment">//归并排序先递归处理分界点左右两部分</span><br>    <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>,i=l,j=mid+<span class="hljs-number">1</span>;<span class="hljs-comment">//this i=&quot;L&quot;,j=mid+&quot;1&quot;</span><br>    <span class="hljs-comment">//设定左右部分的起点</span><br>    <span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;<br>        <span class="hljs-keyword">if</span>(q[i]&lt;=q[j]) temp[k++]=q[i++];<br>        <span class="hljs-keyword">else</span> temp[k++]=q[j++];<br>    <span class="hljs-comment">//temp数组中先存入比较中的小值，经过递归处理后，小值都将位于左侧，升序排列</span><br>    &#125;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid) temp[k++]=q[i++];<br>    <span class="hljs-comment">//如果比较完成后，左部分仍然有剩余数组，将其直接接到temp数组后(经过前面递归处理部分，内部已经有序，剩下的数组必然为较大部分，排列在后边)</span><br>    <span class="hljs-keyword">while</span>(j&lt;=r) temp[k++]=q[j++];<br>    <span class="hljs-comment">//处理右部分多余的情况</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l,j=<span class="hljs-number">0</span>;i&lt;=r;i++,j++) q[i]=temp[j];<span class="hljs-comment">//this i=&quot;L&quot;</span><br>    <span class="hljs-comment">//将临时数组中的数存入原数组</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;arr[i]);<br>    &#125;<br>  <span class="hljs-built_in">merge_sort</span>(arr,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-时空复杂度与稳定性"><a href="#3-时空复杂度与稳定性" class="headerlink" title="3.时空复杂度与稳定性"></a>3.时空复杂度与稳定性</h2><blockquote><p>快速排序是不稳定的，时间复杂度为O（n<em>logn）到O（n平方）。<br>归并排序是稳定的，时间复杂度为O（n</em>logn）。<br>注意:稳定是值排序前后，相同数字的位置是否发生变化。<br>快速排序在一趟排序中将数字分割成为独立的两部分，左边一部分小于轴值，右边一部分大于轴值，轴值的选择理论上可以选择数组中的任何一个数组，我们在这里考虑选择第一个数字。然后对两部分序列重复进行上述操作，快速排序可以用递归来完成，其时间复杂度：最好情况O(n<em>logn)——Partition函数每次恰好能均分序列，其递归树的深度就为.log2n.+1（.x.表示不大于x的最大整数），即仅需递归log2n次； 最坏情况O（n^2）,每次划分只能将序列分为一个元素与其他元素两部分，这时的快速排序退化为冒泡排序，如果用数画出来，得到的将会是一棵单斜树，也就是说所有所有的节点只有左（右）节点的树；平均时间复杂度O(n</em>logn)。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简介：简单记录一下快速排序与归并排序的实C++实现。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>c++ cout control</title>
    <link href="http://example.com/2022/12/06/cpp-cout-control/"/>
    <id>http://example.com/2022/12/06/cpp-cout-control/</id>
    <published>2022-12-06T21:47:05.000Z</published>
    <updated>2022-12-11T11:57:44.749Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：介绍利用c++头文件<code>&lt;iomanip&gt;</code>和<code>printf</code>等函数实现输出精度的控制。</p></blockquote><span id="more"></span><h2 id="1-利用-lt-iomanip-gt-中的setprecision函数实现输出精度控制"><a href="#1-利用-lt-iomanip-gt-中的setprecision函数实现输出精度控制" class="headerlink" title="1.利用&lt;iomanip&gt;中的setprecision函数实现输出精度控制"></a>1.利用<code>&lt;iomanip&gt;</code>中的<code>setprecision</code>函数实现输出精度控制</h2><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">double</span> a=<span class="hljs-number">1234.1234</span>;<br>    <span class="hljs-type">double</span> b=<span class="hljs-number">1.5555</span>;<br>    cout&lt;&lt;a&lt;&lt;endl;<br>    <span class="hljs-comment">//cout浮点数默认输出六位有效数字</span><br>    cout&lt;&lt;<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">5</span>)&lt;&lt;a&lt;&lt;endl;<br>    <span class="hljs-comment">//设置输出有效数字5位，不包含小数点（不同于setw），并且不是直接截断，而是四舍五入;</span><br>    cout&lt;&lt;a&lt;&lt;endl;<br>    <span class="hljs-comment">//在下一次更改setprecison的值之前，上一次设定的精度仍然有效;</span><br>    cout&lt;&lt;b&lt;&lt;endl;<br>    <span class="hljs-comment">//在该输出精度小于设定精度时不生效;</span><br>    cout&lt;&lt;fixed&lt;&lt;<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">5</span>)&lt;&lt;a&lt;&lt;endl;<br>    <span class="hljs-comment">//输入fixed后设定精度改为小数位数，且小数位数不足时补0，四舍五入;</span><br>    cout&lt;&lt;b&lt;&lt;endl;<br>    <span class="hljs-comment">//小数位数的修改仍然有效;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs md">1234.12<br>1234.1<br>1234.1<br>1.5555<br>1234.12340<br>1.55550<br></code></pre></td></tr></table></figure><h2 id="2-setw和setfill用法"><a href="#2-setw和setfill用法" class="headerlink" title="2.setw和setfill用法"></a>2.<code>setw</code>和<code>setfill</code>用法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">double</span> a=<span class="hljs-number">1234.1234</span>;<br>    <span class="hljs-type">double</span> b=<span class="hljs-number">1.5555</span>;<br>    cout&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">5</span>)&lt;&lt;a&lt;&lt;endl;<br>    <span class="hljs-comment">//设置输出5位宽度（包括小数点），默认右对齐，setw只对紧接着的输出产生作用（对在前面的输出也不产生作用），且超过设定位数后输出默认位数;</span><br>    cout&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">10</span>)&lt;&lt;b&lt;&lt;endl;<br>    <span class="hljs-comment">//不足设定精度的默认用空格补齐;</span><br>    cout&lt;&lt;<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>)&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">10</span>)&lt;&lt;b&lt;&lt;endl;<br>    <span class="hljs-comment">//可使用setfill改变补齐字符，不能单独使用，需配合setw使用;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs md">1234.12<br><span class="hljs-code">    1.5555</span><br><span class="hljs-code">00001.5555</span><br></code></pre></td></tr></table></figure><h2 id="3-printf输出精度控制"><a href="#3-printf输出精度控制" class="headerlink" title="3.printf输出精度控制"></a>3.printf输出精度控制</h2><p>一般格式：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">printf(&quot;格式控制字符串&quot;,输出列表)；<br></code></pre></td></tr></table></figure><p>格式控制字符串形式：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">[<span class="hljs-string">标志</span>][<span class="hljs-symbol">输出最小宽度</span>][<span class="hljs-string">.精度</span>][<span class="hljs-symbol">长度</span>][<span class="hljs-string">类型</span>]<br></code></pre></td></tr></table></figure><p>类型</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs md">d  以十进制形式输出带符号整数(正数不输出符号) <br>o  以八进制形式输出无符号整数(不输出前缀 0) <br>x,X  以十六进制形式输出无符号整数(不输出前缀 Ox) <br>u  以十进制形式输出无符号整数 <br>f  以小数形式输出单、双精度实数 <br>e,E  以指数形式输出单、双精度实数 <br>g,G  以%f 或%e 中较短的输出宽度输出单、双精度实数 <br>c  输出单个字符 <br>s  输出字符串 <br></code></pre></td></tr></table></figure><p>标志：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-bullet">-</span>  结果左对齐，右边填空格 <br><span class="hljs-bullet">-</span>  输出符号(正号或负号) <br>空格  输出值为正时冠以空格，为负时冠以负号 <br><span class="hljs-section">#  对 c,s,d,u类无影响；</span><br>对 o 类,在输出时加前缀 o；对 x 类,在输出时加前缀 0x；<br>对 e,g,f 类当结果有小数时才给出小数点<br></code></pre></td></tr></table></figure><p>输出位宽：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs md">用十进制整数来表示输出的最少位数。<br>若实际位数多于定义的宽度，则按实际位数输出，<br>若实际位数少于定义的宽度则补以空格或 0。<br></code></pre></td></tr></table></figure><p>精度：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs md">精度格式符以“.”开头，后跟十进制整数。本项的意义是：<br>如果输出数字，则表示小数的位数；<br>如果输出的是字符，则表示输出字符的个数；<br>若实际位数大于所定义的精度数，则截去超过的部分。 <br></code></pre></td></tr></table></figure><p>长度：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs md">长度格式符为 h,l 两种，<br>h 表示按短整型量输出，l 表示按长整型量输出。<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">char</span> s[] = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">12345</span>;<br>    <span class="hljs-type">double</span> d = <span class="hljs-number">123.45678</span>;<br><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, s);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.*s\n&quot;</span>, <span class="hljs-number">3</span>, s);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#.8x\n&quot;</span>, s);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#p\n\n&quot;</span>, s);<br><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%*d\n&quot;</span>, <span class="hljs-number">10</span>, i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%0*d\n\n&quot;</span>, <span class="hljs-number">10</span>, i);<br><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>, d);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.*f\n&quot;</span>, <span class="hljs-number">3</span>, d);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%20.10f\n&quot;</span>, d);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%*.*f\n\n&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>, d);<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs md">abcdefg<br>abc<br>0x456de280<br>0x7ffc456de280<br><br><br>12345<br><span class="hljs-code">     12345</span><br><span class="hljs-code">0000012345</span><br><span class="hljs-code"></span><br><br>123.456780<br>123.457<br><span class="hljs-code">      123.4567800000</span><br><span class="hljs-code">      123.4567800000</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简介：介绍利用c++头文件&lt;code&gt;&amp;lt;iomanip&amp;gt;&lt;/code&gt;和&lt;code&gt;printf&lt;/code&gt;等函数实现输出精度的控制。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="c++" scheme="http://example.com/categories/c/"/>
    
    
    <category term="输出流控制" scheme="http://example.com/tags/%E8%BE%93%E5%87%BA%E6%B5%81%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>github actions部署hexo</title>
    <link href="http://example.com/2022/09/29/hexo_actions/"/>
    <id>http://example.com/2022/09/29/hexo_actions/</id>
    <published>2022-09-29T15:09:09.000Z</published>
    <updated>2022-12-11T11:57:44.749Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：在将hexo搭建到github后，我发现每次都要用多个hexo的命令来推送并部署博客，并且原代码的上传也需要额外操作，比较麻烦。但是在浏览多个相关博客内容后，发现相关的教程都比较复杂，不太具备直接copy的能力，于是有此文。利用github action实现一键部署hexo到pages并备份博客代码。  </p></blockquote><span id="more"></span><h2 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1.创建仓库"></a>1.创建仓库</h2><p>我们需要两个github仓库来实现博客代码的私有化存储和hexo编译文件的pages布置。  </p><p><img src="https://wwlww.oss-cn-chengdu.aliyuncs.com/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(4).png" alt="github仓库"><br>另一个应该在部署hexo到github pages时已经建立，仓库名应该为<code>github用户名.github.io</code>  </p><h2 id="2-创建ssh密钥来让本地与github之间实现无密码拉取与推送"><a href="#2-创建ssh密钥来让本地与github之间实现无密码拉取与推送" class="headerlink" title="2.创建ssh密钥来让本地与github之间实现无密码拉取与推送"></a>2.创建ssh密钥来让本地与github之间实现无密码拉取与推送</h2><p>在终端输入创建ssh密钥的命令：<code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code>  </p><blockquote><p>注意:需要输入的是注册github的邮箱。并且在输入命令后一直回车就行。直到让你输入y&#x2F;n，输入y即可，后面让输入密码不用管，直接回车，否则以后每次拉取都要输入密码。  </p></blockquote><p>成功创建后，windows系统是在<code>C:user/用户名/.ssh/</code>文件夹下产生ssh密钥。<br><img src="https://wwlww.oss-cn-chengdu.aliyuncs.com/blog/ssh0.png" alt="ssh0"><br>其中id_rsa是私钥，id_rsa.pub是公钥。找到刚才建立的博客仓库的设置页面。选择secrets中的action选项。<br><img src="https://wwlww.oss-cn-chengdu.aliyuncs.com/blog/id_rsa.png" alt="secret"><br>在此添加私钥，起名为<code>HEXO_DEPLOY_KEY</code>将之前创建的id_rsa文件用记事本打开并复制到该密钥下。<br><img src="https://wwlww.oss-cn-chengdu.aliyuncs.com/blog/id_rsa1.png" alt="id-rsa1"><br>在github中点击自己的头像，进入settings页面，选择SSH and GPG keys，点击new SSH key,输入公钥。<br><img src="https://wwlww.oss-cn-chengdu.aliyuncs.com/blog/pub.png" alt="pub">  </p><h2 id="3-设置github-action"><a href="#3-设置github-action" class="headerlink" title="3.设置github action"></a>3.设置github action</h2><p>在hexo的主目录下，找到<code>.github/workflows/</code>文件夹，创建<code>deploy.yml</code>，输入如下代码修改后保存。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs css"><br>name: Deploy<br><br>on: [push]<br><br>jobs:<br>  build:<br>    runs-on: ubuntu-latest<br>    name: A job to deploy blog.<br>    steps:<br>      - name: Checkout<br>        uses: actions/checkout@v1<br>        with:<br>          submodules: true # Checkout private <span class="hljs-built_in">submodules</span>(themes or something else).<br><br>      # Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over <span class="hljs-number">7</span> days.)<br>      - name: Cache node modules<br>        uses: actions/cache@v1<br>        id: cache<br>        with:<br>          path: node_modules<br>          key: $&#123;&#123; runner<span class="hljs-selector-class">.os</span> &#125;&#125;-node-$&#123;&#123; hashFiles(&#x27;**/package-lock<span class="hljs-selector-class">.json</span>&#x27;) &#125;&#125;<br>          restore-keys: |<br>            $&#123;&#123; runner<span class="hljs-selector-class">.os</span> &#125;&#125;-node-<br>      - name: Install Dependencies<br>        if: steps.cache.outputs.cache-hit != <span class="hljs-string">&#x27;true&#x27;</span><br>        run: npm ci<br><br>      # Deploy hexo blog website.<br>      - name: Deploy<br>        id: deploy<br>        uses: sma11black/hexo-action@v1.<span class="hljs-number">0.3</span><br>        with:<br>          deploy_key: $&#123;&#123; secrets<span class="hljs-selector-class">.HEXO_DEPLOY_KEY</span> &#125;&#125;//这是之前设置的私钥名<br>          user_name: 此处输入github名 # (or delete this input setting to use bot account)<br>          user_email: 此处输入github注册邮箱  # (or delete this input setting to use bot account)<br>          commit_msg: $&#123;&#123; github<span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.head_commit</span><span class="hljs-selector-class">.message</span> &#125;&#125;  # (or delete this <span class="hljs-selector-tag">input</span> setting <span class="hljs-selector-tag">to</span> use hexo default settings)<br>      # Use the output <span class="hljs-selector-tag">from</span> the `deploy` step(use for test action)<br>      - name: Get the output<br>        run: |<br>          echo <span class="hljs-string">&quot;$&#123;&#123; steps.deploy.outputs.notify &#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-测试部署是否成功"><a href="#4-测试部署是否成功" class="headerlink" title="4.测试部署是否成功"></a>4.测试部署是否成功</h2><p>到此部署完成，进入终端，将代码push到存储博客代码的仓库，当actions检测到master分支接到推送后，会运行deploy，自动将代码编译并部署到github pages。</p><blockquote><p>注意：在hexo的config文件中，deploy部分的repo要设置为github.io仓库的ssh地址，格式为<code>git@github.com:用户名/用户名.github.io.git</code>。  </p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简介：在将hexo搭建到github后，我发现每次都要用多个hexo的命令来推送并部署博客，并且原代码的上传也需要额外操作，比较麻烦。但是在浏览多个相关博客内容后，发现相关的教程都比较复杂，不太具备直接copy的能力，于是有此文。利用github action实现一键部署hexo到pages并备份博客代码。  &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
</feed>

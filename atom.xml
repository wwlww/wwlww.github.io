<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A simple blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-12T09:09:20.897Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>wwlww</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>翻转法实现旋转数组</title>
    <link href="http://example.com/2023/05/12/%E7%BF%BB%E8%BD%AC%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2023/05/12/%E7%BF%BB%E8%BD%AC%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/</id>
    <published>2023-05-12T15:00:15.000Z</published>
    <updated>2023-05-12T09:09:20.897Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：记录旋转数组的一种奇妙实现方法</p></blockquote><span id="more"></span><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p>给定一个整数数组 nums，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。</p><h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><p>设原数组为{1,2,3,4,5,6,7}，k&#x3D;3,目标为{5,6,7,1,2,3,4,5};<br>首先翻转整个数组得{7,6,5,4,3,2,1};<br>再翻转前k个数得{5,6,7,4,3,2,1};<br>最后翻转坐标为[k]到[n-1]的数组得{5,6,7,1,2,3,4};</p><h2 id="3-时空复杂度"><a href="#3-时空复杂度" class="headerlink" title="3.时空复杂度"></a>3.时空复杂度</h2><p>时间复杂度：O(n);<br>空间复杂度：O(1);</p><h2 id="4-code"><a href="#4-code" class="headerlink" title="4.code"></a>4.code</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//优化：k等于数组长度n时，右移k等价于不移动，故可以通对k取余来优化算法</span>    k<span class="token operator">=</span>k<span class="token operator">%</span>n<span class="token punctuation">;</span>    <span class="token comment">//整体翻转</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//翻转前k个数</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//翻转后面的数</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//翻转一段数组的实现</span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        start<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        end<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简介：记录旋转数组的一种奇妙实现方法&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>quick_sort and merge_sort</title>
    <link href="http://example.com/2022/12/10/quick-sort-and-merge-sort/"/>
    <id>http://example.com/2022/12/10/quick-sort-and-merge-sort/</id>
    <published>2022-12-10T22:38:21.000Z</published>
    <updated>2023-05-12T09:09:20.897Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：简单记录一下快速排序与归并排序的实C++实现。</p></blockquote><span id="more"></span><h2 id="1-快速排序"><a href="#1-快速排序" class="headerlink" title="1.快速排序"></a>1.快速排序</h2><p>代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//传入待排数组和左右边界</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">//排除空数组和单个数字</span>    <span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">=</span>q<span class="token punctuation">[</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//设定双指针的位置，启动位置距离边界为1,x为分界点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//比较数字与分界点的大小，当i指针运行到大于分界点的数字时停下</span>        <span class="token keyword">do</span> j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//比较数字与分界点的大小，当j指针运行到小于分界点的数字时停下</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//交换i和j所指的不满足分界条件的数字，使其仍然满足i左边的全小于x，j右边的全大于x</span>    <span class="token punctuation">&#125;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>l<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将数组分为l到j和j+1到r两部分，递归处理两边，分治的思想</span>    <span class="token comment">//注意：当用i指针划分时，应取l到i-1和i-1到r，此时x不能取q[l]，否则会发生死循环，当使用j时同理，不能取q[r]</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读入数组长度</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//正序读入数组</span>    <span class="token punctuation">&#125;</span>   <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用快排函数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//打印排序后的数组</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-归并排序"><a href="#2-归并排序" class="headerlink" title="2.归并排序"></a>2.归并排序</h2><p>代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//“>>”为位运算，表示左值除以2的右值次方</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//归并排序先递归处理分界点左右两部分</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span>l<span class="token punctuation">,</span>j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//this i="L",j=mid+"1"</span>    <span class="token comment">//设定左右部分的起点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//temp数组中先存入比较中的小值，经过递归处理后，小值都将位于左侧，升序排列</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//如果比较完成后，左部分仍然有剩余数组，将其直接接到temp数组后(经过前面递归处理部分，内部已经有序，剩下的数组必然为较大部分，排列在后边)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//处理右部分多余的情况</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//this i="L"</span>    <span class="token comment">//将临时数组中的数存入原数组</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token function">merge_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-时空复杂度与稳定性"><a href="#3-时空复杂度与稳定性" class="headerlink" title="3.时空复杂度与稳定性"></a>3.时空复杂度与稳定性</h2><blockquote><p>快速排序是不稳定的，时间复杂度为O（n<em>logn）到O（n平方）。<br>归并排序是稳定的，时间复杂度为O（n</em>logn）。<br>注意:稳定是值排序前后，相同数字的位置是否发生变化。<br>快速排序在一趟排序中将数字分割成为独立的两部分，左边一部分小于轴值，右边一部分大于轴值，轴值的选择理论上可以选择数组中的任何一个数组，我们在这里考虑选择第一个数字。然后对两部分序列重复进行上述操作，快速排序可以用递归来完成，其时间复杂度：最好情况O(n<em>logn)——Partition函数每次恰好能均分序列，其递归树的深度就为.log2n.+1（.x.表示不大于x的最大整数），即仅需递归log2n次； 最坏情况O（n^2）,每次划分只能将序列分为一个元素与其他元素两部分，这时的快速排序退化为冒泡排序，如果用数画出来，得到的将会是一棵单斜树，也就是说所有所有的节点只有左（右）节点的树；平均时间复杂度O(n</em>logn)。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简介：简单记录一下快速排序与归并排序的实C++实现。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>c++ cout control</title>
    <link href="http://example.com/2022/12/06/cpp-cout-control/"/>
    <id>http://example.com/2022/12/06/cpp-cout-control/</id>
    <published>2022-12-06T21:47:05.000Z</published>
    <updated>2023-05-12T09:09:20.897Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：介绍利用c++头文件<code>&lt;iomanip&gt;</code>和<code>printf</code>等函数实现输出精度的控制。</p></blockquote><span id="more"></span><h2 id="1-利用-lt-iomanip-gt-中的setprecision函数实现输出精度控制"><a href="#1-利用-lt-iomanip-gt-中的setprecision函数实现输出精度控制" class="headerlink" title="1.利用&lt;iomanip&gt;中的setprecision函数实现输出精度控制"></a>1.利用<code>&lt;iomanip&gt;</code>中的<code>setprecision</code>函数实现输出精度控制</h2><p>代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> a<span class="token operator">=</span><span class="token number">1234.1234</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> b<span class="token operator">=</span><span class="token number">1.5555</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//cout浮点数默认输出六位有效数字</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//设置输出有效数字5位，不包含小数点（不同于setw），并且不是直接截断，而是四舍五入;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//在下一次更改setprecison的值之前，上一次设定的精度仍然有效;</span>    cout<span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//在该输出精度小于设定精度时不生效;</span>    cout<span class="token operator">&lt;&lt;</span>fixed<span class="token operator">&lt;&lt;</span><span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//输入fixed后设定精度改为小数位数，且小数位数不足时补0，四舍五入;</span>    cout<span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//小数位数的修改仍然有效;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1234.121234.11234.11.55551234.123401.55550<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-setw和setfill用法"><a href="#2-setw和setfill用法" class="headerlink" title="2.setw和setfill用法"></a>2.<code>setw</code>和<code>setfill</code>用法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> a<span class="token operator">=</span><span class="token number">1234.1234</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> b<span class="token operator">=</span><span class="token number">1.5555</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//设置输出5位宽度（包括小数点），默认右对齐，setw只对紧接着的输出产生作用（对在前面的输出也不产生作用），且超过设定位数后输出默认位数;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//不足设定精度的默认用空格补齐;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">setfill</span><span class="token punctuation">(</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//可使用setfill改变补齐字符，不能单独使用，需配合setw使用;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1234.12    1.555500001.5555<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-printf输出精度控制"><a href="#3-printf输出精度控制" class="headerlink" title="3.printf输出精度控制"></a>3.printf输出精度控制</h2><p>一般格式：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">printf("格式控制字符串",输出列表)；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>格式控制字符串形式：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">标志</span>][<span class="token variable">输出最小宽度</span>]</span>[.精度]<span class="token url">[<span class="token content">长度</span>][<span class="token variable">类型</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类型</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">d  以十进制形式输出带符号整数(正数不输出符号) o  以八进制形式输出无符号整数(不输出前缀 0) x,X  以十六进制形式输出无符号整数(不输出前缀 Ox) u  以十进制形式输出无符号整数 f  以小数形式输出单、双精度实数 e,E  以指数形式输出单、双精度实数 g,G  以%f 或%e 中较短的输出宽度输出单、双精度实数 c  输出单个字符 s  输出字符串 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标志：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span>  结果左对齐，右边填空格 <span class="token list punctuation">-</span>  输出符号(正号或负号) 空格  输出值为正时冠以空格，为负时冠以负号 <span class="token title important"><span class="token punctuation">#</span>  对 c,s,d,u类无影响；</span>对 o 类,在输出时加前缀 o；对 x 类,在输出时加前缀 0x；对 e,g,f 类当结果有小数时才给出小数点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出位宽：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">用十进制整数来表示输出的最少位数。若实际位数多于定义的宽度，则按实际位数输出，若实际位数少于定义的宽度则补以空格或 0。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>精度：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">精度格式符以“.”开头，后跟十进制整数。本项的意义是：如果输出数字，则表示小数的位数；如果输出的是字符，则表示输出字符的个数；若实际位数大于所定义的精度数，则截去超过的部分。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>长度：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">长度格式符为 h,l 两种，h 表示按短整型量输出，l 表示按长整型量输出。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">123.45678</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.*s\n"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%#.8x\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%#p\n\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%*d\n"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%0*d\n\n"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.*f\n"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%20.10f\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%*.*f\n\n"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">abcdefgabc0x456de2800x7ffc456de28012345     123450000012345123.456780123.457      123.4567800000      123.4567800000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简介：介绍利用c++头文件&lt;code&gt;&amp;lt;iomanip&amp;gt;&lt;/code&gt;和&lt;code&gt;printf&lt;/code&gt;等函数实现输出精度的控制。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="c++" scheme="http://example.com/categories/c/"/>
    
    
    <category term="输出流控制" scheme="http://example.com/tags/%E8%BE%93%E5%87%BA%E6%B5%81%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>github actions部署hexo</title>
    <link href="http://example.com/2022/09/29/hexo_actions/"/>
    <id>http://example.com/2022/09/29/hexo_actions/</id>
    <published>2022-09-29T15:09:09.000Z</published>
    <updated>2023-05-12T09:09:20.897Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介：在将hexo搭建到github后，我发现每次都要用多个hexo的命令来推送并部署博客，并且原代码的上传也需要额外操作，比较麻烦。但是在浏览多个相关博客内容后，发现相关的教程都比较复杂，不太具备直接copy的能力，于是有此文。利用github action实现一键部署hexo到pages并备份博客代码。  </p></blockquote><span id="more"></span><h2 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1.创建仓库"></a>1.创建仓库</h2><p>我们需要两个github仓库来实现博客代码的私有化存储和hexo编译文件的pages布置。  </p><p><img src="https://wwlww.oss-cn-chengdu.aliyuncs.com/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(4).png" alt="github仓库"><br>另一个应该在部署hexo到github pages时已经建立，仓库名应该为<code>github用户名.github.io</code>  </p><h2 id="2-创建ssh密钥来让本地与github之间实现无密码拉取与推送"><a href="#2-创建ssh密钥来让本地与github之间实现无密码拉取与推送" class="headerlink" title="2.创建ssh密钥来让本地与github之间实现无密码拉取与推送"></a>2.创建ssh密钥来让本地与github之间实现无密码拉取与推送</h2><p>在终端输入创建ssh密钥的命令：<code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code>  </p><blockquote><p>注意:需要输入的是注册github的邮箱。并且在输入命令后一直回车就行。直到让你输入y&#x2F;n，输入y即可，后面让输入密码不用管，直接回车，否则以后每次拉取都要输入密码。  </p></blockquote><p>成功创建后，windows系统是在<code>C:user/用户名/.ssh/</code>文件夹下产生ssh密钥。<br><img src="https://wwlww.oss-cn-chengdu.aliyuncs.com/blog/ssh0.png" alt="ssh0"><br>其中id_rsa是私钥，id_rsa.pub是公钥。找到刚才建立的博客仓库的设置页面。选择secrets中的action选项。<br><img src="https://wwlww.oss-cn-chengdu.aliyuncs.com/blog/id_rsa.png" alt="secret"><br>在此添加私钥，起名为<code>HEXO_DEPLOY_KEY</code>将之前创建的id_rsa文件用记事本打开并复制到该密钥下。<br><img src="https://wwlww.oss-cn-chengdu.aliyuncs.com/blog/id_rsa1.png" alt="id-rsa1"><br>在github中点击自己的头像，进入settings页面，选择SSH and GPG keys，点击new SSH key,输入公钥。<br><img src="https://wwlww.oss-cn-chengdu.aliyuncs.com/blog/pub.png" alt="pub">  </p><h2 id="3-设置github-action"><a href="#3-设置github-action" class="headerlink" title="3.设置github action"></a>3.设置github action</h2><p>在hexo的主目录下，找到<code>.github/workflows/</code>文件夹，创建<code>deploy.yml</code>，输入如下代码修改后保存。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">name</span><span class="token punctuation">:</span> Deploy<span class="token property">on</span><span class="token punctuation">:</span> [push]<span class="token property">jobs</span><span class="token punctuation">:</span>  <span class="token property">build</span><span class="token punctuation">:</span>    <span class="token property">runs-on</span><span class="token punctuation">:</span> ubuntu-latest    <span class="token property">name</span><span class="token punctuation">:</span> A job to deploy blog.    <span class="token property">steps</span><span class="token punctuation">:</span>      - <span class="token property">name</span><span class="token punctuation">:</span> Checkout        <span class="token property">uses</span><span class="token punctuation">:</span> actions/checkout<span class="token atrule"><span class="token rule">@v1</span>        <span class="token property">with</span><span class="token punctuation">:</span>          <span class="token property">submodules</span><span class="token punctuation">:</span> true # Checkout private <span class="token function">submodules</span><span class="token punctuation">(</span>themes <span class="token keyword">or</span> something else<span class="token punctuation">)</span>.      # Caching dependencies to speed up workflows. <span class="token punctuation">(</span>GitHub will remove any cache entries that have <span class="token keyword">not</span> been accessed in over 7 days.<span class="token punctuation">)</span>      - <span class="token property">name</span><span class="token punctuation">:</span> Cache node modules        <span class="token property">uses</span><span class="token punctuation">:</span> actions/cache@v1        <span class="token property">id</span><span class="token punctuation">:</span> cache        <span class="token property">with</span><span class="token punctuation">:</span>          <span class="token property">path</span><span class="token punctuation">:</span> node_modules          <span class="token property">key</span><span class="token punctuation">:</span> $</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> runner.os <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">-node-$</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token function">hashFiles</span><span class="token punctuation">(</span><span class="token string">'**/package-lock.json'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token selector">restore-keys: |            $</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> runner.os <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>-node-      - <span class="token property">name</span><span class="token punctuation">:</span> Install Dependencies        <span class="token property">if</span><span class="token punctuation">:</span> steps.cache.outputs.cache-hit != <span class="token string">'true'</span>        <span class="token property">run</span><span class="token punctuation">:</span> npm ci      # Deploy hexo blog website.      - <span class="token property">name</span><span class="token punctuation">:</span> Deploy        <span class="token property">id</span><span class="token punctuation">:</span> deploy        <span class="token property">uses</span><span class="token punctuation">:</span> sma11black/hexo-action<span class="token atrule"><span class="token rule">@v1</span>.0.3        <span class="token property">with</span><span class="token punctuation">:</span>          <span class="token property">deploy_key</span><span class="token punctuation">:</span> $</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.HEXO_DEPLOY_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">//这是之前设置的私钥名          user_name: 此处输入github名 # (or delete this input setting to use bot account)          user_email: 此处输入github注册邮箱  # (or delete this input setting to use bot account)          commit_msg: $</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> github.event.head_commit.message <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  # <span class="token punctuation">(</span>or delete this input setting to use hexo default settings<span class="token punctuation">)</span>      # Use the output from the `deploy` <span class="token function">step</span><span class="token punctuation">(</span>use for test action<span class="token punctuation">)</span>      - <span class="token property">name</span><span class="token punctuation">:</span> Get the output        <span class="token property">run</span><span class="token punctuation">:</span> |          echo <span class="token selector">"$</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> steps.deploy.outputs.notify <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-测试部署是否成功"><a href="#4-测试部署是否成功" class="headerlink" title="4.测试部署是否成功"></a>4.测试部署是否成功</h2><p>到此部署完成，进入终端，将代码push到存储博客代码的仓库，当actions检测到master分支接到推送后，会运行deploy，自动将代码编译并部署到github pages。</p><blockquote><p>注意：在hexo的config文件中，deploy部分的repo要设置为github.io仓库的ssh地址，格式为<code>git@github.com:用户名/用户名.github.io.git</code>。  </p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简介：在将hexo搭建到github后，我发现每次都要用多个hexo的命令来推送并部署博客，并且原代码的上传也需要额外操作，比较麻烦。但是在浏览多个相关博客内容后，发现相关的教程都比较复杂，不太具备直接copy的能力，于是有此文。利用github action实现一键部署hexo到pages并备份博客代码。  &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
</feed>
